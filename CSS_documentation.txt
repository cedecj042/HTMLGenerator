CSS
Folder Overview
The CSS Generator folder contains all the necessary files and folders related to generating CSS styles. 
It serves as the root directory for the CSS generation process.

Folder Structure:

CSS
├───Combinators
├───Properties
│   ├───Animation
│   ├───Box
│   ├───Display
│   ├───Layout
│   ├───Miscellaneous
│   └───Styling
└───Pseudoclass


Combinators: 
	The "combinators" folder is part of the CSS generator's directory structure. This folder contains PHP classes that define combinator-related CSS properties. These properties are used to select elements based on their relationships with other elements in the DOM, such as adjacency, sibling relationships, and child-parent relationships.

css-generator/
    └── Combinators/
        ├── AdjacentSiblingSelector.php
        ├── ChildSelector.php
        ├── GeneralSiblingSelector.php
        └── DescendantSelector.php

AdjacentSibling.php

File Overview:
This file, AdjacentSiblingSelector.php, defines the AdjacentSiblingSelector class, which extends the CssRule class to handle CSS rules for adjacent sibling selectors.

Dependencies: CSS\CssRule

Classes and Methods: Class: AdjacentSiblingSelector

Description: Extends the CssRule class to support CSS adjacent sibling selectors, which target an element that is immediately preceded by a specified sibling.

Properties:
		private $parentSelector: The parent element in the selector.
		protected $selector: The child element in the selector.

Methods:
__construct($parentSelector, $childSelector)

	Description: Initializes the AdjacentSiblingSelector with a parent selector and a child selector.
	Parameters:
			parentSelector: string - The CSS selector for the parent element.
			childSelector: string - The CSS selector for the child element.
	Returns: None

render()

	Description: Renders the adjacent sibling CSS selector and its properties as a string.
	Parameters: None
	Returns: string - The rendered CSS rule.


Additional Notes:
The render method overrides the parent class's render method to format the adjacent sibling selector correctly.

The AdjacentSiblingSelector class inherits properties and methods from the CssRule class, allowing it to manage properties similarly.

This class is useful for defining styles that apply to an element only when it is immediately preceded by a specified sibling.


ChildSelector.php

File Overview:
This file, ChildSelector.php, defines the ChildSelector class, which extends the CssRule class to handle CSS rules for child selectors. 

Dependencies: CSS\CssRule

Classes and Methods: Class: ChildSelector

Description: Extends the CssRule class to support CSS child selectors, which target elements that are direct children of a specified parent element.

Properties:
	private $parentSelector: The parent element in the selector.
	protected $selector: The child element in the selector.

Methods:
__construct($parentSelector, $childSelector)

	Description: Initializes the ChildSelector with a parent selector and a child selector.
	Parameters:
			parentSelector: string - The CSS selector for the parent element.
			childSelector: string - The CSS selector for the child element.
	Returns: None

render()

	Description: Renders the child CSS selector and its properties as a string.
	Parameters: None
	Returns: string - The rendered CSS rule.


Additional Notes
The render method overrides the parent class's render method to format the child selector correctly.

The ChildSelector class inherits properties and methods from the CssRule class, allowing it to manage properties similarly.

This class is useful for defining styles that apply to elements which are direct children of a specified parent.


DescendantSelector.php

File Overview: 
DescendantSelector.php, defines the DescendantSelector class, which extends the CssRule class to handle CSS rules for descendant selectors. 

Dependencies: CSS\CssRule

Classes and Methods: Class: DescendantSelector

Description: Extends the CssRule class to support CSS descendant selectors, which target elements that are descendants of a specified ancestor.

Properties:
	private $parentSelector: The ancestor element in the selector.
	protected $selector: The descendant element in the selector.

Methods:
__construct($parentSelector, $childSelector)

	Description: Initializes the DescendantSelector with an ancestor selector and a descendant selector.
	Parameters:
			parentSelector: string - The CSS selector for the ancestor element.
			childSelector: string - The CSS selector for the descendant element.
	Returns: None

render()

	Description: Renders the descendant CSS selector and its properties as a string.
	Parameters: None
	Returns: string - The rendered CSS rule.


Additional Notes: 
The render method overrides the parent class's render method to format the descendant selector correctly.

The DescendantSelector class inherits properties and methods from the CssRule class, allowing it to manage properties similarly.

This class is useful for defining styles that apply to elements which are descendants of a specified ancestor.


GeneralSiblingSelector.php

File Overview:
GeneralSiblingSelector.php, defines the GeneralSiblingSelector class, which extends the CssRule class to handle CSS rules for general sibling selectors. 

Dependencies: CSS\CssRule

Classes and Methods: Class: GeneralSiblingSelector

Description: Extends the CssRule class to support CSS general sibling selectors, which target elements that are siblings of a specified element and appear after it in the HTML document.

Properties:
	private $parentSelector: The preceding element in the selector.
	protected $selector: The sibling element in the selector.

Methods:
__construct($parentSelector, $siblingSelector)

	Description: Initializes the GeneralSiblingSelector with a preceding selector and a sibling selector.
	Parameters:
			parentSelector: string - The CSS selector for the preceding element.
			siblingSelector: string - The CSS selector for the sibling element.
	Returns: None

render()

	Description: Renders the general sibling CSS selector and its properties as a string.
	Parameters: None
	Returns: string - The rendered CSS rule.


Additional Notes:
The render method overrides the parent class's render method to format the general sibling selector correctly.

The GeneralSiblingSelector class inherits properties and methods from the CssRule class, allowing it to manage properties similarly.

This class is useful for defining styles that apply to sibling elements which follow a specified element.



Properties:
The "Properties" folder is a central part of the CSS generator project, containing various subfolders and files that define CSS properties through PHP classes. Each subfolder groups related CSS properties, making the structure organized and modular.

css-generator/
└── properties/
    ├── Animation/
    │   ├── Animation.php
    │   └── Transition.php
    ├── Box/
    │   ├── Border.php
    │   └── Outline.php
    ├── Display/
    │   ├── Content.php
    │   └── Display.php
    ├── Layout/
    │   ├── BoxModel.php
    │   ├── Flexbox.php
    │   ├── Grid.php
    │   ├── Overflow.php
    │   └── Positioning.php
    ├── Miscellaneous/
    │   ├── ClipPath.php
    │   ├── Cursor.php
    │   ├── Filter.php
    │   ├── Miscellaneous.php
    │   └── Transform.php
    ├── Styling/
    │   ├── Background.php
    │   ├── Font.php
    │   └── Text.php
    └── CssProperty.php

Animation
	The Animation folder is part of the Properties directory within the main folder of the CSS generator project. This folder is dedicated to handling CSS properties related to animations and transitions.

css-generator/
└── properties/
    ├── Animation/
    │   ├── Animation.php
    │   └── Transition.php

Animation.php

File Overview:
Animation.php, defines the Animation class, which implements the CssProperty interface to handle CSS animation properties. 

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Animation

Description: Implements the CssProperty interface to manage CSS animation properties.

Properties: $properties: An array to store CSS animation properties.

Methods:
animation($value)

	Description: Sets the animation property.
	Parameters: $value: string - The value for the animation property.
	Returns: Animation - Returns the Animation object for method chaining.

_webkit_animation($value)

	Description: Sets the -webkit-animation property.
	Parameters: $value: string - The value for the -webkit-animation property.
	Returns: Animation - Returns the Animation object for method chaining.

_moz_animation($value)

	Description: Sets the -moz-animation property.
	Parameters: $value: string - The value for the -moz-animation property.
	Returns: Animation - Returns the Animation object for method chaining.

_o_animation($value)

	Description: Sets the -o-animation property.
	Parameters: $value: string - The value for the -o-animation property.
	Returns: Animation - Returns the Animation object for method chaining.

_ms_animation($value)

	Description: Sets the -ms-animation property.
	Parameters: $value: string - The value for the -ms-animation property.
	Returns: Animation - Returns the Animation object for method chaining.

animation_name($value)

	Description: Sets the animation-name property.
	Parameters: $value: string - The value for the animation-name property.
	Returns: Animation - Returns the Animation object for method chaining.

animation_duration($value)

	Description: Sets the animation-duration property.
	Parameters: $value: string - The value for the animation-duration property.
	Returns: Animation - Returns the Animation object for method chaining.

animation_timing_function($value)

	Description: Sets the animation-timing-function property.
	Parameters: $value: string - The value for the animation-timing-function property.
	Returns: Animation - Returns the Animation object for method chaining.

animation_delay($value)

	Description: Sets the animation-delay property.
	Parameters: $value: string - The value for the animation-delay property.
	Returns: Animation - Returns the Animation object for method chaining.

animation_iteration_count($value)

	Description: Sets the animation-iteration-count property.
	Parameters: $value: string - The value for the animation-iteration-count property.
	Returns: Animation - Returns the Animation object for method chaining.

animation_direction($value)
	Description: Sets the animation-direction property.
	Parameters: $value: string - The value for the animation-direction property.
	Returns: Animation - Returns the Animation object for method chaining.

animation_fill_mode($value)

	Description: Sets the animation-fill-mode property.
	Parameters: $value: string - The value for the animation-fill-mode property.
	Returns: Animation - Returns the Animation object for method chaining.

render()
	Description: Renders all animation properties as a single string.
	Parameters: None
	Returns: string - The rendered CSS animation properties.

Additional Notes:
The Animation class implements the CssProperty interface, allowing it to be used as a CSS property within CSS rule declarations.

Various methods are provided to set different animation properties, each returning the Animation object for method chaining.

The render method concatenates all animation properties into a single string for rendering.

Transition.php

File Overview:
This file, Transition.php, defines the Transition class, which implements the CssProperty interface to handle CSS properties related to transitions.

Dependencies: CSS\Properties\CssProperty
Classes and Methods: Class: Transition
Description: Implements the CssProperty interface to manage CSS properties related to transitions, including properties for transition, transition property, duration, timing function, and delay.

Properties: protected $properties: Array containing CSS transition properties.

Methods:
transition($value)

	Description: Sets the transition property to specify the CSS properties to transition.
	Parameters:
			$value: string - The value for the transition property.
	Returns: $this - Instance of the Transition class for method chaining.

transition_property($value)

	Description: Sets the transition-property property to specify which CSS properties to transition.
	Parameters: $value: string - The value for the transition-property property.
	Returns: $this - Instance of the Transition class for method chaining.

transition_duration($value)

	Description: Sets the transition-duration property to specify the duration of the transition effect.
	Parameters: $value: string - The value for the transition-duration property.
	Returns: $this - Instance of the Transition class for method chaining.

transition_timing_function($value)

	Description: Sets the transition-timing-function property to specify the speed curve of the transition effect.
	Parameters: $value: string - The value for the transition-timing-function property.
	Returns: $this - Instance of the Transition class for method chaining.

transition_delay($value)

	Description: Sets the transition-delay property to specify a delay before the transition effect starts.
	Parameters: $value: string - The value for the transition-delay property.
	Returns: $this - Instance of the Transition class for method chaining.

_o_transition($value)

	Description: Sets the -o-transition property for compatibility with Opera browsers.
	Parameters: $value: string - The value for the -o-transition property.
	Returns: $this - Instance of the Transition class for method chaining.

_moz_transition($value)

	Description: Sets the -moz-transition property for compatibility with Mozilla browsers.
	Parameters: $value: string - The value for the -moz-transition property.
	Returns: $this - Instance of the Transition class for method chaining.

_webkit_transition($value)

	Description: Sets the -webkit-transition property for compatibility with WebKit-based browsers.
	Parameters: $value: string - The value for the -webkit-transition property.
	Returns: $this - Instance of the Transition class for method chaining.

_webkit_box_shadow($value)

	Description: Sets the -webkit-box-shadow property for compatibility with WebKit-based browsers.
	Parameters: $value: string - The value for the -webkit-box-shadow property.
	Returns: $this - Instance of the Transition class for method chaining.

_moz_box_shadow($value)

	Description: Sets the -moz-box-shadow property for compatibility with Mozilla browsers.
	Parameters: $value: string - The value for the -moz-box-shadow property.
	Returns: $this - Instance of the Transition class for method chaining.

_webkit_border_radius($value)

	Description: Sets the -webkit-border-radius property for compatibility with WebKit-based browsers.
	Parameters: $value: string - The value for the -webkit-border-radius property.
	Returns: $this - Instance of the Transition class for method chaining.

_moz_border_radius($value)
	Description: Sets the -moz-border-radius property for compatibility with Mozilla browsers.
	Parameters: $value: string - The value for the -moz-border-radius property.
	Returns: $this - Instance of the Transition class for method chaining.

render()
	Description: Renders the transition CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS properties.

Additional Notes
The render method formats the CSS properties for output.

The class provides methods for setting transition properties and their vendor-prefixed equivalents for better cross-browser compatibility.

Box
	The Box folder is part of the Properties directory within the main folder of the CSS generator project. This folder is focused on handling CSS properties related to the box model, specifically border and outline properties.

css-generator/
└── properties/
    ├── Box/
    │   ├── Border.php
    │   └── Outline.php

Border.php

File Overview:
Border.php, defines the Border class, which implements the CssProperty interface to manage CSS properties related to borders. 

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Border

Description: Implements the CssProperty interface to handle CSS properties related to borders, including properties for border width, style, color, radius, collapse, and individual sides.

Properties: protected $properties: Array containing CSS border properties.

Methods:
border($value)

	Description: Sets the border property to specify the width, style, and color of the border.
	Parameters: $value: string - The value for the border property.
	Returns: $this - Instance of the Border class for method chaining.

border_width($value)

	Description: Sets the border-width property to specify the width of the border.
	Parameters: $value: string - The value for the border-width property.
	Returns: $this - Instance of the Border class for method chaining.

border_style($value)

	Description: Sets the border-style property to specify the style of the border.
	Parameters: $value: string - The value for the border-style property.
	Returns: $this - Instance of the Border class for method chaining.

border_color($value)

	Description: Sets the border-color property to specify the color of the border.
	Parameters: $value: string - The value for the border-color property.
	Returns: $this - Instance of the Border class for method chaining.

border_radius($value)

	Description: Sets the border-radius property to specify the radius of the border corners.
	Parameters: $value: string - The value for the border-radius property.
	Returns: $this - Instance of the Border class for method chaining.

border_collapse($value)

	Description: Sets the border-collapse property to specify whether table borders should be collapsed into a single border or not.
	Parameters: $value: string - The value for the border-collapse property.
	Returns: $this - Instance of the Border class for method chaining.

border_left($value)

	Description: Sets the border-left property to specify the width, style, and color of the left border.
	Parameters: $value: string - The value for the border-left property.
	Returns: $this - Instance of the Border class for method chaining.

border_right($value)

	Description: Sets the border-right property to specify the width, style, and color of the right border.
	Parameters: $value: string - The value for the border-right property.
	Returns: $this - Instance of the Border class for method chaining.

border_top($value)

	Description: Sets the border-top property to specify the width, style, and color of the top border.
	Parameters: $value: string - The value for the border-top property.
	Returns: $this - Instance of the Border class for method chaining.

border_bottom($value)

	Description: Sets the border-bottom property to specify the width, style, and color of the bottom border.
	Parameters: $value: string - The value for the border-bottom property.
	Returns: $this - Instance of the Border class for method chaining.

empty_cells($value)

	Description: Sets the empty-cells property to specify how table cells with no content are rendered.
	Parameters: $value: string - The value for the empty-cells property.
	Returns: $this - Instance of the Border class for method chaining.

caption_side($value)

	Description: Sets the caption-side property to specify the placement of table captions.
	Parameters: $value: string - The value for the caption-side property.
	Returns: $this - Instance of the Border class for method chaining.

table_layout($value)

	Description: Sets the table-layout property to specify the algorithm used to lay out table cells, rows, and columns.
	Parameters: $value: string - The value for the table-layout property.
	Returns: $this - Instance of the Border class for method chaining.

border_top_left_radius($value)

	Description: Sets the border-top-left-radius property to specify the radius of the top-left corner of the border.
	Parameters: $value: string - The value for the border-top-left-radius property.
	Returns: $this - Instance of the Border class for method chaining.

border_top_right_radius($value)

	Description: Sets the border-top-right-radius property to specify the radius of the top-right corner of the border.
	Parameters: $value: string - The value for the border-top-right-radius property.
	Returns: $this - Instance of the Border class for method chaining.

border_bottom_left_radius($value)

	Description: Sets the border-bottom-left-radius property to specify the radius of the bottom-left corner of the border.
	Parameters: $value: string - The value for the border-bottom-left-radius property.
	Returns: $this - Instance of the Border class for method chaining.

border_bottom_right_radius($value)

	Description: Sets the border-bottom-right-radius property to specify the radius of the bottom-right corner of the border.
	Parameters: $value: string - The value for the border-bottom-right-radius property.
	Returns: $this - Instance of the Border class for method chaining.

render()

	Description: Renders the border CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS properties.


Additional Notes:
The render method formats the CSS properties for output.

The class provides methods for setting border properties and their individual attributes for better flexibility and control over the border styling.

Outline.php

File Overview:
Outline.php, defines the Outline class, which implements the CssProperty interface to manage CSS properties related to outlines.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Outline

Description: Implements the CssProperty interface to handle CSS properties related to outlines, including properties for outline width, style, and color.

Properties: protected $properties: Array containing CSS outline properties.

Methods:
outline_width($value)

	Description: Sets the outline-width property to specify the width of the outline.
	Parameters: $value: string - The value for the outline-width property.
	Returns: $this - Instance of the Outline class for method chaining.

outline_style($value)

	Description: Sets the outline-style property to specify the style of the outline.
	Parameters: $value: string - The value for the outline-style property.
	Returns: $this - Instance of the Outline class for method chaining.

outline_color($value)

	Description: Sets the outline-color property to specify the color of the outline.
	Parameters: $value: string - The value for the outline-color property.
	Returns: $this - Instance of the Outline class for method chaining.

render()

	Description: Renders the outline CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS properties.


Additional Notes
The render method formats the CSS properties for output.

The class provides methods for setting outline properties and their individual attributes for better flexibility and control over the outline styling.

Display 
	This file defines the Display class, which manages the display CSS property. The display property specifies the type of rendering box used for an element, controlling its layout behavior. This class provides methods for setting different display values such as block, inline, inline-block, none, and more.

css-generator/
└── properties/
    ├── Display/
    │   ├── Content.php
    │   └── Display.php

Content.php

File Overview:
Content.php, defines the Content class, which implements the CssProperty interface to manage CSS properties related to content display.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Content

Description: Implements the CssProperty interface to handle CSS properties related to content display, including properties for content, place-content, align-content, align-items, content-reset, and counter-increment.

Properties: protected $properties: Array containing CSS content properties.

Methods:
content($value)

	Description: Sets the content property to specify the content of an element.
	Parameters: $value: string - The value for the content property.
	Returns: $this - Instance of the Content class for method chaining.

place_content($value)

	Description: Sets the place-content property to align content along both the block and inline axes.
	Parameters: $value: string - The value for the place-content property.
	Returns: $this - Instance of the Content class for method chaining.

align_content($value)

	Description: Sets the align-content property to align content along the block axis.
	Parameters: $value: string - The value for the align-content property.
	Returns: $this - Instance of the Content class for method chaining.

align_items($value)

	Description: Sets the align-items property to align items along the block axis.
	Parameters: $value: string - The value for the align-items property.
	Returns: $this - Instance of the Content class for method chaining.

content_reset($value)

	Description: Sets the content-reset property to reset content.
	Parameters: $value: string - The value for the content-reset property.
	Returns: $this - Instance of the Content class for method chaining.

counter_increment($value)

	Description: Sets the counter-increment property to increase the value of a counter.
	Parameters: $value: string - The value for the counter-increment property.
	Returns: $this - Instance of the Content class for method chaining.

render()

	Description: Renders the content CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS properties.

Display.php

File Overview
Display.php, defines the Display class, which implements the CssProperty interface to manage CSS properties related to display.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Display

Description: Implements the CssProperty interface to handle CSS properties related to the display of elements, including properties for display, visibility, and opacity.

Properties: protected $properties: Array containing CSS display properties.

Methods:
display($value)

	Description: Sets the display property to specify the display behavior of an element.
	Parameters: $value: string - The value for the display property.
	Returns: $this - Instance of the Display class for method chaining.

visibility($value)

	Description: Sets the visibility property to specify whether an element is visible or hidden.
	Parameters: $value: string - The value for the visibility property.
	Returns: $this - Instance of the Display class for method chaining.

opacity($value)

	Description: Sets the opacity property to specify the transparency level of an element.
	Parameters: $value: string - The value for the opacity property.
	Returns: $this - Instance of the Display class for method chaining.

render()

	Description: Renders the display CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS properties.

Additional Notes
The render method formats the CSS properties for output.

The class provides methods for setting various display-related properties, allowing for flexible and detailed display styling.


Layout
	The Layout folder resides within the Properties directory of the CSS generator project. It focuses on handling CSS properties related to the layout of elements, providing essential tools for defining the structure and positioning of content.

css-generator/
└── properties/
    ├── Layout/
    │   ├── BoxModel.php
    │   ├── Flexbox.php
    │   ├── Grid.php
    │   ├── Overflow.php
    │   └── Positioning.php

BoxModel.php

File Overview:
BoxModel.php file defines the BoxModel class, which implements the CssProperty interface. This class manages CSS properties related to the box model, including width, height, margin, padding, border, and display. 

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: BoxModel

Description: The BoxModel class handles CSS properties associated with the box model, such as dimensions, spacing, and border.

Properties: protected $properties: An array containing box model-related CSS properties.

Methods:
width($value)

	Description: Sets the width property to define the width of an element.
	Parameters: $value (string): The value for the width property (e.g., 100px, 50%).
	Returns: $this - Instance of the BoxModel class for method chaining.

max_width($value)

	Description: Sets the max-width property to specify the maximum width of an element.
	Parameters: $value (string): The value for the max-width property (e.g., 100px, 50%).
	Returns: $this - Instance of the BoxModel class for method chaining.

min_width($value)

	Description: Sets the min-width property to specify the minimum width of an element.
	Parameters: $value (string): The value for the min-width property (e.g., 100px, 50%).
	Returns: $this - Instance of the BoxModel class for method chaining.

height($value)

	Description: Sets the height property to define the height of an element.
	Parameters: $value (string): The value for the height property (e.g., 100px, 50%).
	Returns: $this - Instance of the BoxModel class for method chaining.

min_height($value)

	Description: Sets the min-height property to specify the minimum height of an element.
	Parameters: $value (string): The value for the min-height property (e.g., 100px, 50%).
	Returns: $this - Instance of the BoxModel class for method chaining.

max_height($value)

	Description: Sets the max-height property to specify the maximum height of an element.
	Parameters: $value (string): The value for the max-height property (e.g., 100px, 50%).
	Returns: $this - Instance of the BoxModel class for method chaining.

margin($value)

	Description: Sets the margin property to define the margin of an element.
	Parameters: $value (string): The value for the margin property (e.g., 10px, 5px 10px).	
	Returns: $this - Instance of the BoxModel class for method chaining.

margin_top($value)

	Description: Sets the margin-top property to define the top margin of an element.
	Parameters:$value (string): The value for the margin-top property (e.g., 10px).
	Returns: $this - Instance of the BoxModel class for method chaining.

margin_right($value)

	Description: Sets the margin-right property to define the right margin of an element.
	Parameters: $value (string): The value for the margin-right property (e.g., 10px).
	Returns: $this - Instance of the BoxModel class for method chaining.

margin_bottom($value)

	Description: Sets the margin-bottom property to define the bottom margin of an element.
	Parameters: $value (string): The value for the margin-bottom property (e.g., 10px).
	Returns: $this - Instance of the BoxModel class for method chaining.

margin_left($value)

	Description: Sets the margin-left property to define the left margin of an element.
	Parameters:$value (string): The value for the margin-left property (e.g., 10px).
	Returns: $this - Instance of the BoxModel class for method chaining.

padding($value)
	Description: Sets the padding property to define the padding of an element on all sides.
	Parameters:$value (string): The value for the padding property (e.g., 10px, 5px 10px).
	Returns: $this - Instance of the BoxModel class for method chaining.

padding_top($value)

	Description: Sets the padding-top property to define the top padding of an element.
	Parameters: $value (string): The value for the padding-top property (e.g., 10px).
	Returns: $this - Instance of the BoxModel class for method chaining.

padding_right($value)

	Description: Sets the padding-right property to define the right padding of an element.
	Parameters: $value (string): The value for the padding-right property (e.g., 10px).
	Returns: $this - Instance of the BoxModel class for method chaining.

padding_bottom($value)

	Description: Sets the padding-bottom property to define the bottom padding of an element.
	Parameters: $value (string): The value for the padding-bottom property (e.g., 10px).
	Returns: $this - Instance of the BoxModel class for method chaining.

padding_left($value)

	Description: Sets the padding-left property to define the left padding of an element.
	Parameters: $value (string): The value for the padding-left property (e.g., 10px).
	Returns: $this - Instance of the BoxModel class for method chaining.

border($value)

	Description: Sets the border property to define the border of an element.
	Parameters: $value (string): The value for the border property (e.g., 1px solid black).
	Returns: $this - Instance of the BoxModel class for method chaining.

display($value)

	Description: Sets the display property to specify the type of rendering box used for an element.
	Parameters: $value (string): The value for the display property (e.g., block, inline, inline-block, none).
	Returns: $this - Instance of the BoxModel class for method chaining.
render()

	Description: Renders the box model-related CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS.

Flexbox.php

File Overview:
Flexbox.php file defines the FlexBox class, which implements the CssProperty interface. This class is responsible for managing CSS properties related to flexbox layout.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: FlexBox

Description: The FlexBox class handles CSS properties associated with flexbox layout, including display, flex-direction, justify-content, flex-wrap, flex-grow, flex-shrink, flex-basis, align-items, align-self, align-content, and box-sizing.

Properties: protected $properties: An array containing flexbox-related CSS properties.

Methods:
display($value)

	Description: Sets the display property to define a flex container.
	Parameters: $value (string): The value for the display property (e.g., flex, inline-flex).
	Returns: $this - Instance of the FlexBox class for method chaining.

flex_direction($value)

	Description: Sets the flex-direction property to specify the direction of the flex container's main axis.
	Parameters: $value (string): The value for the flex-direction property (e.g., row, row-reverse, column, column-reverse).
	Returns: $this - Instance of the FlexBox class for method chaining.

justify_content($value)

	Description: Sets the justify-content property to align flex items along the main axis of the flex container.
	Parameters: $value (string): The value for the justify-content property (e.g., flex-start, flex-end, center, space-between, space-around, space-evenly).
	Returns: $this - Instance of the FlexBox class for method chaining.

flex_wrap($value)

	Description: Sets the flex-wrap property to control whether flex items are forced onto a single line or can wrap onto multiple lines.
	Parameters: $value (string): The value for the flex-wrap property (e.g., nowrap, wrap, wrap-reverse).
	Returns: $this - Instance of the FlexBox class for method chaining.

flex_grow($value)

	Description: Sets the flex-grow property to specify how flex items grow relative to each other.
	Parameters: $value (string): The value for the flex-grow property (e.g., 0, 1).
	Returns: $this - Instance of the FlexBox class for method chaining.

flex_shrink($value)

	Description: Sets the flex-shrink property to specify how flex items shrink relative to each other.
	Parameters: $value (string): The value for the flex-shrink property (e.g., 0, 1).
	Returns: $this - Instance of the FlexBox class for method chaining.

flex_basis($value)

	Description: Sets the flex-basis property to specify the initial main size of a flex item.
	Parameters: $value (string): The value for the flex-basis property (e.g., auto, 100px).
	Returns: $this - Instance of the FlexBox class for method chaining.

align_items($value)

	Description: Sets the align-items property to align flex items along the cross axis of the flex container.
	Parameters: $value (string): The value for the align-items property (e.g., stretch, flex-start, flex-end, center, baseline).
	Returns: $this - Instance of the FlexBox class for method chaining.

align_self($value)

	Description: Sets the align-self property to align a single flex item along the cross axis.
	Parameters: $value (string): The value for the align-self property (e.g., auto, flex-start, flex-end, center, baseline, stretch).
	Returns: $this - Instance of the FlexBox class for method chaining.

align_content($value)

	Description: Sets the align-content property to align multiple lines of flex items along the cross axis.
	Parameters: $value (string): The value for the align-content property (e.g., stretch, flex-start, flex-end, center, space-between, space-around).
	Returns: $this - Instance of the FlexBox class for method chaining.

box_sizing($value)

	Description: Sets the box-sizing property to specify how the total width and height of an element is calculated.
	Parameters: $value (string): The value for the box-sizing property (e.g., content-box, border-box).
	Returns: $this - Instance of the FlexBox class for method chaining.

render()

	Description: Renders the flexbox-related CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS.

Grid.php

File Overview:
Grid.php, defines the Grid class, which implements the CssProperty interface to manage CSS properties related to grid layouts. 

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Grid

Description: The Grid class handles CSS properties associated with creating and styling grid layouts, including display, justify-content, grid-template-columns, grid-template-rows, grid-gap, and grid-auto-flow.

Properties: protected $properties: An array containing grid-related CSS properties.

Methods:
display($value)

	Description: Sets the display property to specify the type of display for the grid container.
	Parameters: $value (string): The value for the display property (e.g., grid, inline-grid).
	Returns: $this - Instance of the Grid class for method chaining.

justify_content($value)

	Description: Sets the justify-content property to align grid items along the inline axis of the grid container.
	Parameters: $value (string): The value for the justify-content property (e.g., start, end, center).
	Returns: $this - Instance of the Grid class for method chaining.

grid_template_columns($value)

	Description: Sets the grid-template-columns property to define the size of the columns in a grid layout.
	Parameters: $value (string): The value for the grid-template-columns property (e.g., 100px 200px 300px).
	Returns: $this - Instance of the Grid class for method chaining.

grid_template_rows($value)

	Description: Sets the grid-template-rows property to define the size of the rows in a grid layout.
	Parameters: $value (string): The value for the grid-template-rows property (e.g., 100px 200px 300px).
	Returns: $this - Instance of the Grid class for method chaining.

grid_gap($value)

	Description: Sets the grid-gap property to define the size of the gaps between grid items.
	Parameters: $value (string): The value for the grid-gap property (e.g., 10px, 1em).
	Returns: $this - Instance of the Grid class for method chaining.

grid_auto_flow($value)

	Description: Sets the grid-auto-flow property to determine how grid items are automatically placed in the grid layout.
	Parameters: $value (string): The value for the grid-auto-flow property (e.g., row, column, dense).
	Returns: $this - Instance of the Grid class for method chaining.

render()

	Description: Renders the grid-related CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS.

Overflow.php
File Overview:
Overflow.php, defines the Overflow class, which implements the CssProperty interface to manage CSS properties related to overflow behaviors. 

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Overflow

Description: The Overflow class handles CSS properties associated with controlling overflow behavior, including overflow, overflow-wrap, overflow-x, and overflow-y. These properties are used to manage how content overflows its containing element.

Properties: protected $properties: An array containing overflow-related CSS properties.

Methods:
overflow($value)

	Description: Sets the overflow property to specify how content that is too large to fit into an element's box should be handled.
	Parameters: $value (string): The value for the overflow property (e.g., visible, hidden, scroll, auto).
	Returns: $this - Instance of the Overflow class for method chaining.

overflow_wrap($value)

	Description: Sets the overflow-wrap property to specify whether or not the browser should insert line breaks within words to prevent overflow.
	Parameters: $value (string): The value for the overflow-wrap property (e.g., normal, break-word).
	Returns: $this - Instance of the Overflow class for method chaining.

overflow_x($value)

	Description: Sets the overflow-x property to specify how the horizontal overflow should be handled.
	Parameters: $value (string): The value for the overflow-x property (e.g., visible, hidden, scroll, auto).
	Returns: $this - Instance of the Overflow class for method chaining.

overflow_y($value)

	Description: Sets the overflow-y property to specify how the vertical overflow should be handled.
	Parameters: $value (string): The value for the overflow-y property (e.g., visible, hidden, scroll, auto).
	Returns: $this - Instance of the Overflow class for method chaining.

render()

	Description: Renders the overflow-related CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS.

Positioning.php

File Overview:
Positioning.php defines the Positioning class, which implements the CssProperty interface. This class is responsible for managing CSS properties related to positioning elements on a webpage.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Positioning

Description: The Positioning class handles CSS properties associated with positioning elements, including position, top, right, bottom, left, clip, z-index, float, and clear.

Properties: protected $properties: An array containing positioning-related CSS properties.

Methods:
position($value)

	Description: Sets the position property to specify the positioning scheme used for the element.
	Parameters: $value (string): The value for the position property (e.g., static, relative, absolute, fixed).
	Returns: $this - Instance of the Positioning class for method chaining.

top($value)


	Description: Sets the top property to specify the top position of the positioned element.
	Parameters: $value (string): The value for the top property (e.g., 10px, 50%).
	Returns: $this - Instance of the Positioning class for method chaining.

right($value)

	Description: Sets the right property to specify the right position of the positioned element.
	Parameters: $value (string): The value for the right property (e.g., 10px, 50%).
	Returns: $this - Instance of the Positioning class for method chaining.

bottom($value)

	Description: Sets the bottom property to specify the bottom position of the positioned element.
	Parameters: $value (string): The value for the bottom property (e.g., 10px, 50%).
	Returns: $this - Instance of the Positioning class for method chaining.

left($value)

	Description: Sets the left property to specify the left position of the positioned element.
	Parameters: $value (string): The value for the left property (e.g., 10px, 50%).
	Returns: $this - Instance of the Positioning class for method chaining.

clip($value)

	Description: Sets the clip property to specify the visible region of an absolutely positioned element.
	Parameters: $value (string): The value for the clip property (e.g., auto, rect(0, 10px, 10px, 0)).
	Returns: $this - Instance of the Positioning class for method chaining.

z_index($value)

	Description: Sets the z-index property to specify the stack order of the positioned element.
	Parameters: $value (string): The value for the z-index property (e.g., 1, auto).
	Returns: $this - Instance of the Positioning class for method chaining.

float($value)

	Description: Sets the float property to specify whether an element should float to the left, right, or none.
	Parameters: $value (string): The value for the float property (e.g., left, right, none).
	Returns: $this - Instance of the Positioning class for method chaining.

clear($value)

	Description: Sets the clear property to specify whether an element can be next to floating elements.
	Parameters: $value (string): The value for the clear property (e.g., left, right, both, none).
	Returns: $this - Instance of the Positioning class for method chaining.

render()

	Description: Renders the positioning-related CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS.


Miscellaneous
	The Miscellaneous folder resides within the Properties directory of the CSS generator project. It contains classes responsible for handling miscellaneous CSS properties that may not fit into specific categories but are still essential for styling elements effectively.

css-generator/
└── properties/
    ├── Miscellaneous/
    │   ├── ClipPath.php
    │   ├── Cursor.php
    │   ├── Filter.php
    │   ├── Miscellaneous.php
    │   └── Transform.php

ClipPath.php

File Overview:
ClipPath.php, defines the ClipPath class, which implements the CssProperty interface to manage CSS properties related to the clip-path property.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: ClipPath

Description: Implements the CssProperty interface to handle CSS properties related to the clip-path property, allowing for defining clipping paths for elements.

Properties: protected $properties: Array containing CSS properties for the clip-path property.

Methods:
shape($value)

	Description: Sets the shape property to define the shape of the clipping path.
	Parameters: $value: string - The value for the shape property.
	Returns: $this - Instance of the ClipPath class for method chaining.

offset($value)

	Description: Sets the offset property to define the offset of the clipping path.
	Parameters: $value: string - The value for the offset property.
	Returns: $this - Instance of the ClipPath class for method chaining.

render()

	Description: Renders the CSS properties for the clip-path as a string.
	Parameters: None
	Returns: string - The rendered CSS properties.


Additional Notes
The render method formats the CSS properties for output.

The class provides methods for setting various properties related to the clip-path, allowing for flexible and detailed clipping path definitions.

Cursor.php

File Overview:
Cursor.php, defines the Cursor class, which implements the CssProperty interface to manage CSS properties related to the cursor property.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Cursor

Description: Implements the CssProperty interface to handle the CSS cursor property, which specifies the type of cursor to be displayed when pointing over an element.

Properties: protected $properties: Array containing CSS properties for the cursor.

Methods:
cursor($value)

	Description: Sets the cursor property to define the type of cursor to be displayed.
	Parameters: $value: string - The value for the cursor property (e.g., pointer, default, text).
	Returns: $this - Instance of the Cursor class for method chaining.

render()

	Description: Renders the CSS properties for the cursor as a string.
	Parameters: None
	Returns: string - The rendered CSS properties.


Additional Notes:
The render method formats the CSS properties for output.

The class provides a method for setting the cursor property, allowing for the customization of the cursor appearance when hovering over elements.

Filter.php

File Overview:
Filter.php, defines the Filter class, which implements the CssProperty interface to manage CSS properties related to various filter effects.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Filter

Description: Implements the CssProperty interface to handle CSS filter properties such as brightness, contrast, blur, grayscale, hue-rotate, invert, saturate, and sepia. These properties allow for graphical effects like color adjustments and blurring.

Properties: protected $properties: Array containing CSS filter properties.

Methods:
brightness($value)

	Description: Sets the brightness filter property to adjust the brightness of an element.
	Parameters: $value: string - The value for the brightness property (e.g., 50%, 1.5).
	Returns: $this - Instance of the Filter class for method chaining.

contrast($value)

	Description: Sets the contrast filter property to adjust the contrast of an element.
	Parameters: $value: string - The value for the contrast property (e.g., 200%, 0.8).
	Returns: $this - Instance of the Filter class for method chaining.

blur($value)

	Description: Sets the blur filter property to apply a blur effect to an element.
	Parameters: $value: string - The value for the blur property (e.g., 5px).
	Returns: $this - Instance of the Filter class for method chaining.

grayscale($value)

	Description: Sets the grayscale filter property to convert an element to grayscale.
	Parameters: $value: string - The value for the grayscale property (e.g., 100%).
	Returns: $this - Instance of the Filter class for method chaining.

hue_rotate($value)

	Description: Sets the hue-rotate filter property to apply a hue rotation effect to an element.
	Parameters: $value: string - The value for the hue-rotate property (e.g., 90deg).
	Returns: $this - Instance of the Filter class for method chaining.

invert($value)

	Description: Sets the invert filter property to invert the colors of an element.
	Parameters: $value: string - The value for the invert property (e.g., 100%).
	Returns: $this - Instance of the Filter class for method chaining.

saturate($value)

	Description: Sets the saturate filter property to adjust the saturation of an element.
	Parameters: $value: string - The value for the saturate property (e.g., 2).	
	Returns: $this - Instance of the Filter class for method chaining.

sepia($value)

	Description: Sets the sepia filter property to apply a sepia effect to an element.
	Parameters: $value: string - The value for the sepia property (e.g., 100%).
	Returns: $this - Instance of the Filter class for method chaining.

render()

	Description: Renders the CSS filter properties as a string.
	Parameters: None
	Returns: string - The rendered CSS filter properties.


Additional Notes:
The render method formats the CSS filter properties for output.

The class provides methods for setting various filter properties, allowing for comprehensive graphical adjustments and effects on elements.

Miscellaneous.php

File Overview:
Miscellaneous.php, defines the Miscellaneous class, which implements the CssProperty interface to manage a variety of CSS properties that do not fit neatly into other categories.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Miscellaneous

Description: Implements the CssProperty interface to handle various miscellaneous CSS properties such as opacity, box-shadow, text-shadow, and content. These properties are often used to apply stylistic effects to HTML elements.

Properties: protected $properties: Array containing miscellaneous CSS properties.

Methods:
opacity($value)

	Description: Sets the opacity property to adjust the transparency of an element.
	Parameters: $value: string - The value for the opacity property (e.g., 0.5, 1).
	Returns: $this - Instance of the Miscellaneous class for method chaining.

box_shadow($value)

	Description: Sets the box-shadow property to apply a shadow effect to an element's box.
	Parameters: $value: string - The value for the box-shadow property (e.g., 10px 10px 5px #888888).
	Returns: $this - Instance of the Miscellaneous class for method chaining.

text_shadow($value)

	Description: Sets the text-shadow property to apply a shadow effect to an element's text.
	Parameters: $value: string - The value for the text-shadow property (e.g., 2px 2px #ff0000).
	Returns: $this - Instance of the Miscellaneous class for method chaining.

content($value)

	Description: Sets the content property, typically used with pseudo-elements like ::before and ::after.
	Parameters: $value: string - The value for the content property (e.g., "Hello, World!", attr(data-content)).	
	Returns: $this - Instance of the Miscellaneous class for method chaining.

render()

	Description: Renders the miscellaneous CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS properties.


Additional Notes
The render method formats the miscellaneous CSS properties for output.

The class provides methods for setting various miscellaneous properties, allowing for comprehensive stylistic adjustments on elements.

Transform.php

File Overview
Transform.php, defines the Transform class, which implements the CssProperty interface to manage CSS properties related to transformations.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Transform

Description: Implements the CssProperty interface to handle CSS properties associated with transformations such as transform, origin, rotate, scale, translate, skew, and z-index. These properties are used to manipulate the position, rotation, scale, and skew of elements on the web page.

Properties: protected $properties: Array containing transformation-related CSS properties.

Methods:
transform($value)

	Description: Sets the transform property to apply a 2D or 3D transformation to an element.
	Parameters: $value: string - The value for the transform property (e.g., rotate(45deg), scale(1.5)).
	Returns: $this - Instance of the Transform class for method chaining.

origin($value)

	Description: Sets the transform-origin property to specify the origin of the transformation.
	Parameters: $value: string - The value for the transform-origin property (e.g., center, 50% 50%).
	Returns: $this - Instance of the Transform class for method chaining.

rotate($value)

	Description: Sets the rotate property to rotate an element.
	Parameters: $value: string - The value for the rotate property (e.g., 45deg, 180deg).
	Returns: $this - Instance of the Transform class for method chaining.

scale($value)

	Description: Sets the scale property to scale an element.
	Parameters: $value: string - The value for the scale property (e.g., 1.5, 0.8).
	Returns: $this - Instance of the Transform class for method chaining.

translate($value)

	Description: Sets the translate property to move an element along the X and Y axes.
	Parameters: $value: string - The value for the translate property (e.g., 100px, 50px, 20%, -30px).
	Returns: $this - Instance of the Transform class for method chaining.

skew($value)

	Description: Sets the skew property to skew an element along the X and Y axes.
	Parameters: $value: string - The value for the skew property (e.g., 20deg, 10deg, -15deg, 0).
	Returns: $this - Instance of the Transform class for method chaining.

z_index($value)

	Description: Sets the z-index property to specify the stack order of an element.
	Parameters: $value: string - The value for the z-index property (e.g., 1, auto).
	Returns: $this - Instance of the Transform class for method chaining.

_webkit_transform($value)

	Description: Sets the -webkit-transform property for compatibility with WebKit browsers.
	Parameters: $value: string - The value for the -webkit-transform property.
	Returns: $this - Instance of the Transform class for method chaining.

_moz_transform($value)

	Description: Sets the -moz-transform property for compatibility with Mozilla browsers.
	Parameters: $value: string - The value for the -moz-transform property.
	Returns: $this - Instance of the Transform class for method chaining.

_o_transform($value)

	Description: Sets the -o-transform property for compatibility with Opera browsers.
	Parameters: $value: string - The value for the -o-transform property.
	Returns: $this - Instance of the Transform class for method chaining.

render()
	Description: Renders the transformation-related CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS



Styling
	The Styling folder is located within the Properties directory of the CSS generator project. It contains classes responsible for managing CSS properties related to styling and appearance customization.

css-generator/
└── properties/
    ├── Styling/
    │   ├── Background.php
    │   ├── Font.php
    │   └── Text.php

Background.php

File Overview:
The Background.php file defines the Background class, which implements the CssProperty interface. This class is responsible for managing CSS properties related to background styling. 

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Background

Description: The Background class handles CSS properties associated with background styling, including background, background-color, background-image, background-repeat, background-size, background-position, and background-attachment.

Properties: protected $properties: An array containing background-related CSS properties.

Methods:
background($value)

Description: Sets the background property to define background shorthand properties.
Parameters: $value (string): The value for the background property.
Returns: $this - Instance of the Background class for method chaining.

background_color($value)

Description: Sets the background-color property to define the background color.
Parameters: $value (string): The color value for the background.
Returns: $this - Instance of the Background class for method chaining.

background_image($value)

Description: Sets the background-image property to define the background image.
Parameters: $value (string): The URL or image value for the background image.
Returns: $this - Instance of the Background class for method chaining.

background_repeat($value)

Description: Sets the background-repeat property to define how the background image is repeated.
Parameters: $value (string): The repeat value (e.g., repeat, no-repeat, repeat-x, repeat-y).
Returns: $this - Instance of the Background class for method chaining.

background_size($value)

Description: Sets the background-size property to define the size of the background image.
Parameters: $value (string): The size value (e.g., cover, contain, auto).
Returns: $this - Instance of the Background class for method chaining.

background_position($value)

Description: Sets the background-position property to define the position of the background image.
Parameters: $value (string): The position value (e.g., center, top left, 50% 50%).
Returns: $this - Instance of the Background class for method chaining.

background_attachment($value)

Description: Sets the background-attachment property to define how the background image is attached to the viewport.
Parameters: $value (string): The attachment value (e.g., scroll, fixed, local).
Returns: $this - Instance of the Background class for method chaining.

render()

Description: Renders the background-related CSS properties as a string.
Parameters: None
Returns: string - The rendered CSS.

Font.php

File Overview:
The Font.php file defines the Font class, which implements the CssProperty interface. This class is responsible for managing CSS properties related to font styling. 

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Font

Description: The Font class handles CSS properties associated with font styling, including font, font-family, font-size, font-weight, font-style, line-height, src, and color.

Properties: protected $properties: An array containing font-related CSS properties.

Methods:
font($value)

Description: Sets the font property to define a shorthand for setting font-related properties.
Parameters: $value (string): The shorthand value for the font property.
Returns: $this - Instance of the Font class for method chaining.

font_family($value)

Description: Sets the font-family property to define the font family.
Parameters: $value (string): The value for the font-family property.
Returns: $this - Instance of the Font class for method chaining.

font_size($value)

Description: Sets the font-size property to define the size of the font.
Parameters: $value (string): The value for the font-size property.
Returns: $this - Instance of the Font class for method chaining.

font_weight($value)

Description: Sets the font-weight property to define the weight (or boldness) of the font.
Parameters: $value (string): The value for the font-weight property.
Returns: $this - Instance of the Font class for method chaining.

font_style($value)

Description: Sets the font-style property to define the style of the font (e.g., normal, italic).
Parameters: $value (string): The value for the font-style property.
Returns: $this - Instance of the Font class for method chaining.

line_height($value)

Description: Sets the line-height property to define the height of the line boxes.
Parameters: $value (string): The value for the line-height property.
Returns: $this - Instance of the Font class for method chaining.

src($value)

Description: Sets the src property to define the source of the font.
Parameters: $value (string): The value for the src property.
Returns: $this - Instance of the Font class for method chaining.

color($value)

Description: Sets the color property to define the color of the text.
Parameters: $value (string): The value for the color property.
Returns: $this - Instance of the Font class for method chaining.

render()

Description: Renders the font-related CSS properties as a string.
Parameters: None
Returns: string - The rendered CSS.

Text.php

File Overview:
The Text.php file defines the Text class, which implements the CssProperty interface. This class is responsible for managing CSS properties related to text styling. It is located in the Styling namespace inside the Properties folder, which is contained within the main folder for the CSS generator.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: Text

Description: The Text class handles CSS properties associated with text styling, including text-align, text-wrap, text-decoration, text-transform, text-shadow, letter-spacing, word-spacing, list-style-type, and list-style.

Properties: protected $properties: An array containing text-related CSS properties.

Methods:
text_align($value)

Description: Sets the text-align property to define the horizontal alignment of text.
Parameters: $value (string): The value for the text-align property (e.g., left, right, center, justify).
Returns: $this - Instance of the Text class for method chaining.

text_wrap($value)

Description: Sets the text-wrap property to control how text wraps within an element.
Parameters: $value (string): The value for the text-wrap property (e.g., normal, nowrap, pre, pre-line, pre-wrap).
Returns: $this - Instance of the Text class for method chaining.

text_decoration($value)

Description: Sets the text-decoration property to define the decoration added to text.
Parameters: $value (string): The value for the text-decoration property (e.g., none, underline, overline, line-through).
Returns: $this - Instance of the Text class for method chaining.

text_transform($value)

Description: Sets the text-transform property to control the capitalization of text.
Parameters: $value (string): The value for the text-transform property (e.g., none, capitalize, uppercase, lowercase).
Returns: $this - Instance of the Text class for method chaining.

text_shadow($value)

Description: Sets the text-shadow property to add shadow to text.
Parameters: $value (string): The value for the text-shadow property (e.g., 1px 1px 2px black).
Returns: $this - Instance of the Text class for method chaining.

letter_spacing($value)

Description: Sets the letter-spacing property to define the space between characters.
Parameters: $value (string): The value for the letter-spacing property (e.g., normal, 2px).
Returns: $this - Instance of the Text class for method chaining.

word_spacing($value)

Description: Sets the word-spacing property to define the space between words.
Parameters: $value (string): The value for the word-spacing property (e.g., normal, 1em).
Returns: $this - Instance of the Text class for method chaining.

list_style_type($value)

Description: Sets the list-style-type property to define the type of list item marker.
Parameters: $value (string): The value for the list-style-type property (e.g., disc, circle, square, decimal, none).
Returns: $this - Instance of the Text class for method chaining.

list_style($value)

Description: Sets the list-style property to define all the list style properties in one declaration.
Parameters: $value (string): The value for the list-style property (e.g., outside disc, inside circle).
Returns: $this - Instance of the Text class for method chaining.

render()

Description: Renders the text-related CSS properties as a string.
Parameters: None
Returns: string - The rendered CSS.


CssProperty.php

File Overview:
The CssProperty.php file defines the CssProperty interface, which is a contract for CSS property classes. It is responsible for ensuring that any class implementing it provides a method to render CSS properties.

Dependencies: None

Interface: CssProperty

Description: The CssProperty interface defines a contract for CSS property classes.

Methods: 

render()
	Description: Renders the CSS properties as a string.
	Parameters: None
	Returns: string - The rendered CSS properties.


Pseudoclass:
	The "Pseudoclass" folder is part of the CSS generator's directory structure. This folder contains PHP classes that define CSS pseudoclass selectors. Pseudoclasses are keywords added to selectors that specify a special state of the selected elements, such as being hovered over by the cursor, being the first child of its parent, or being in a checked state.

css-generator/
    └── Pseudoclass/
        ├── ComplexSelector.php
        ├── Keyframes.php
        └── SimpleSelector.php

ComplexSelector.php

File Overview:
ComplexSelector.php, defines the ComplexSelector class, which extends the CssRule class to handle CSS rules with complex selectors that include pseudo-elements. 

Dependencies: CSS\CssRule: Classes and Methods

Class: ComplexSelector

Description: Extends the CssRule class to support complex CSS selectors that include pseudo-elements.

Properties:
	private $element: The main element in the selector.
	private $pseudoElement: The pseudo-element part of the selector.

Methods:
__construct($selector, $element, $pseudoElement)

	Description: Initializes the ComplexSelector with a selector, element, and pseudo-element.
	Parameters: 
			selector: string - The CSS selector.
			element: string - The element in the selector.
			pseudoElement: string - The pseudo-element part of the selector.
	Returns: None

render()

	Description: Renders the complex CSS selector and its properties as a string.
	Parameters: None
	Returns: string - The rendered CSS rule.


Additional Notes
The render method overrides the parent class's render method to include the element and pseudo-element in the selector.

The ComplexSelector class inherits properties and methods from the CssRule class, allowing it to manage properties and nested rules similarly.

Keyframes.php

File Overview:
This file, Keyframes.php, defines the Keyframes class, which extends the CssRule class to handle CSS keyframes for animations. 

Dependencies: CSS\CssRule

Classes and Methods: Class: Keyframes

Description: Extends the CssRule class to support CSS keyframes for defining animations.

Properties:
private $frames: An array of frames where each key is a percentage and the value is an array of properties for that frame.

Methods:
__construct($name)

	Description: Initializes the Keyframes object with a name.
	Parameters: name: string - The name of the keyframes animation.
	Returns: None

addFrame($percentage, $properties)

	Description: Adds a frame to the keyframes animation.
	Parameters:
			percentage: string - The percentage at which the frame occurs (e.g., '0%', '100%').
			properties: array - An array of CssProperty objects representing the properties for the frame.
	Returns: None

render()

	Description: Renders the keyframes animation as a string.
	Parameters: None
	Returns: string - The rendered CSS for the keyframes animation.


Additional Notes:
The render method overrides the parent class's render method to format the keyframes animation correctly.

The Keyframes class inherits properties and methods from the CssRule class, allowing it to manage properties and nested rules similarly.

Each frame's properties are expected to be an array of CssProperty objects, which must have a render method.

SimpleSelector.php

File Overview:
SimpleSelector.php, defines the SimpleSelector class, which extends the CssRule class to handle CSS rules with simple selectors that include pseudo-classes. 

Dependencies: CSS\CssRule

Classes and Methods: Class: SimpleSelector

Description: Extends the CssRule class to support simple CSS selectors that include pseudo-classes.

Properties:
		private $element: The main element in the selector.
		private $pseudoElement: The pseudo-class part of the selector.

Methods:
__construct($selector, $element, $pseudoElement)

	Description: Initializes the SimpleSelector with a selector, element, and pseudo-class.
	Parameters:
			selector: string - The CSS selector.
			element: string - The element in the selector.
			pseudoElement: string - The pseudo-class part of the selector.
	Returns: None

render()

	Description: Renders the simple CSS selector and its properties as a string.
	Parameters: None
	Returns: string - The rendered CSS rule.


Additional Notes:
The render method overrides the parent class's render method to include the element and pseudo-class in the selector.

The SimpleSelector class inherits properties and methods from the CssRule class, allowing it to manage properties and nested rules similarly.

The element and pseudoElement properties allow for the creation of more specific CSS rules that target pseudo-classes.



CssGenerator

File Overview
CssGenerator.php, defines the CssGenerator class, which is responsible for generating CSS from multiple CssRule objects and comments.

Dependencies: CSS\CssRule

Classes and Methods: Class: CssGenerator

Description: Manages a collection of CSS rules and comments, and provides functionality to render the complete CSS as a string.

Properties:
	private $rules: An array of CssRule objects.
	private $comments: An array of comments to be included in the CSS.

Methods:
addRule($rule)

	Description: Adds a CSS rule to the generator. If the input is a string, it creates a new CssRule object.
	Parameters: rule: string|CssRule - The rule to add, either as a string (selector) or as a CssRule object.
	Returns: CssRule - The added CssRule object.

addComment($comment)

	Description: Adds a comment to be included in the CSS output.
	Parameters: comment: string - The comment to add.
	Returns: None

render()

	Description: Renders the complete CSS including all rules and comments as a string.
	Parameters: None
	Returns: string - The rendered CSS.


Additional Notes:
The addRule method can handle both string selectors and CssRule objects. It throws an exception if the input is neither.

The render method combines comments and rules to produce the final CSS output as a string.

The order of rules and comments in the rendered CSS is determined by the order in which they were added.


CssRule

File Overview:
CSSRule.php, is responsible for defining the CssRule class, which models a CSS rule with properties and nested rules.

Dependencies: CSS\Properties\CssProperty

Classes and Methods: Class: CssRule

Description: Manages a CSS rule, including its selector, properties, and nested rules.

Properties:
	protected $selector: The CSS selector for the rule.
	protected $properties: An array of properties belonging to the CSS rule.
	protected $nestedRules: An array of nested CssRule objects.

Methods:
__construct($selector)

	Description: Initializes the CssRule with a selector.
	Parameters: selector: string - The CSS selector.
	Returns: None

addProperty($property)

	Description: Adds a property to the CSS rule.
	Parameters: property: CssProperty|string - The property to add.
	Returns: None

addProperties(array $properties)

	Description: Adds multiple properties to the CSS rule.
	Parameters: properties: array - An array of properties to add.
	Returns: None

addComment($comment)

	Description: Adds a comment to the properties.
	Parameters: comment: string - The comment to add.
	Returns: None

addCommentedProperties($properties)

	Description: Adds properties as comments to the CSS rule.
	Parameters: properties: array - An associative array of properties to add as comments.
	Returns: None

render()

	Description: Renders the CSS rule as a string.
	Parameters: None
	Returns: string - The rendered CSS rule.


Additional Notes: 
The render method assumes that properties are either strings or objects that have a render method.

The addCommentedProperties method throws an exception if an object property does not have a render or __toString method.

Nested rules can be added similarly to properties, but the current implementation does not show an explicit method for adding nested rules.